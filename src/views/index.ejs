<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Chatbot GPT</title>
    <link href="/css/style.css" rel="stylesheet" />
    <style>
      /* Estilos de layout */
      body {
        height: 100vh;
        margin: 0;
        display: flex;
        flex-direction: column;
        background-color: #1f2937; /* Fundo cinza escuro */
        color: white;
        font-family: Arial, sans-serif;
      }

      .chat-container {
        flex-grow: 1;
        overflow-y: auto;
        padding: 20px;
        display: flex;
        flex-direction: column;
        justify-content: flex-end;
        background-color: #374151; /* Fundo da área de chat */
      }

      /* Estilo das mensagens */
      .message {
        max-width: 75%;
        padding: 12px;
        border-radius: 10px;
        margin-bottom: 10px;
        line-height: 1.4;
      }

      .user-message {
        background-color: #2563eb; /* Mensagem do usuário em azul */
        color: white;
        align-self: flex-end;
        text-align: right;
      }

      .bot-message {
        background-color: #374151; /* Mensagem do bot em cinza */
        color: white;
        align-self: flex-start;
        text-align: left;
      }

      /* Área de input */
      .chat-input-area {
        display: flex;
        padding: 10px;
        background-color: #1f2937; /* Mesma cor do fundo da página */
        border-top: 1px solid #2d3748; /* Borda superior sutil */
        align-items: center;
      }

      /* Estilo dos ícones */
      .icon-button {
        background-color: #2563eb;
        color: white;
        border: none;
        padding: 10px;
        border-radius: 50%;
        cursor: pointer;
        margin-right: 10px;
        display: flex;
        justify-content: center;
        align-items: center;
      }

      .icon-button:hover {
        background-color: #3b82f6;
      }

      /* Estilo do campo de input */
      form {
        display: flex;
        width: 100%;
        align-items: center;
      }

      input[type='text'] {
        flex-grow: 1;
        padding: 10px;
        border: none;
        border-radius: 5px;
        background-color: #2d3748; /* Fundo escuro do input */
        color: white;
        margin-right: 10px;
      }

      button[type='submit'] {
        background-color: #2563eb;
        border: none;
        padding: 10px;
        border-radius: 50%;
        color: white;
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
      }

      button[type='submit']:hover {
        background-color: #3b82f6;
      }

      .icon-square {
        background-color: #dc2626;
      }
    </style>

    <!-- Link atualizado para Font Awesome -->
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/js/all.min.js"
      crossorigin="anonymous"
    ></script>
  </head>
  <body>
    <!-- Área principal do chat -->
    <div class="chat-container" id="chatContainer">
      <!-- As mensagens irão aparecer aqui -->
    </div>

    <!-- Formulário de Chat com os ícones -->
    <div class="chat-input-area">
      <!-- Ícone de atualizar para treinamento -->
      <button class="icon-button" id="trainButton">
        <i class="fas fa-sync-alt"></i>
        <!-- Ícone de atualizar -->
      </button>

      <form id="chatForm">
        <input type="text" id="pergunta" placeholder="Digite sua pergunta..." required />
        <!-- Ícone para enviar a mensagem -->
        <button type="submit" id="sendButton">
          <i class="fas fa-paper-plane"></i>
          <!-- Ícone de enviar (seta para cima) -->
        </button>
      </form>
    </div>

    <script>
      const chatContainer = document.getElementById('chatContainer');
      const chatForm = document.getElementById('chatForm');
      const trainButton = document.getElementById('trainButton');
      const sendButton = document.getElementById('sendButton');
      let isSending = false; // Controla se está enviando ou não

      trainButton.addEventListener('click', function () {
        window.location.href = '/train'; // Redireciona para a página de treinamento
      });

      chatForm.addEventListener('submit', async function (event) {
        event.preventDefault();

        const pergunta = document.getElementById('pergunta').value;
        if (!pergunta) return;

        // Adicionar a pergunta do usuário no chat
        addMessage(pergunta, 'user-message');

        // Limpar o campo de input
        document.getElementById('pergunta').value = '';

        // Alterar o ícone para o modo de envio
        toggleSendIcon();

        // Simular envio da mensagem e permitir o cancelamento
        const controller = new AbortController(); // Controla o abortamento da requisição
        const signal = controller.signal;

        // Enviar pergunta para o servidor e processar a resposta
        try {
          const response = await fetch('/chat/stream', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ pergunta }),
            signal: signal,
          });

          const reader = response.body.getReader();
          const decoder = new TextDecoder();
          let botMessage = '';

          // Criar um novo bloco de mensagem para o chatbot
          const botMessageDiv = document.createElement('div');
          botMessageDiv.classList.add('message', 'bot-message');
          chatContainer.appendChild(botMessageDiv);

          // Ler o stream palavra por palavra
          while (true) {
            const { done, value } = await reader.read();
            if (done) break;
            const textChunk = decoder.decode(value);
            botMessage += textChunk;
            botMessageDiv.innerText = botMessage; // Atualizar a mensagem conforme recebida
            chatContainer.scrollTop = chatContainer.scrollHeight; // Rolagem automática para o final
          }
        } catch (error) {
          if (error.name === 'AbortError') {
            botMessageDiv.innerText = 'Envio cancelado.';
          } else {
            botMessageDiv.innerText = 'Erro no envio da mensagem.';
          }
        } finally {
          // Reverter o ícone após o término do envio
          toggleSendIcon();
        }
      });

      // Alterna entre o ícone de enviar e o de cancelar
      function toggleSendIcon() {
        isSending = !isSending;

        if (isSending) {
          sendButton.innerHTML = '<i class="fas fa-square"></i>'; // Ícone de quadrado para cancelar
          sendButton.classList.add('icon-square');
        } else {
          sendButton.innerHTML = '<i class="fas fa-paper-plane"></i>'; // Ícone de enviar (seta para cima)
          sendButton.classList.remove('icon-square');
        }
      }

      // Função para adicionar mensagens no chat
      function addMessage(message, messageType) {
        const messageDiv = document.createElement('div');
        messageDiv.classList.add('message', messageType);
        messageDiv.innerText = message;
        chatContainer.appendChild(messageDiv);
        chatContainer.scrollTop = chatContainer.scrollHeight; // Rolagem automática para o final
      }
    </script>
  </body>
</html>
